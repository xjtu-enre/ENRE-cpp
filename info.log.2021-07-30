2021-07-30 12:14:47  [ main:0 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.cpp
  2021-07-30 12:14:47  [ main:465 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:522 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:9
  2021-07-30 12:14:47  [ main:524 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:14:47  [ main:524 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:23
  2021-07-30 12:14:47  [ main:602 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:602 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:9
  2021-07-30 12:14:47  [ main:602 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:14:47  [ main:602 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:22
  2021-07-30 12:14:47  [ main:606 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:606 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:11
  2021-07-30 12:14:47  [ main:608 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:14:47  [ main:608 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:69
  2021-07-30 12:14:47  [ main:639 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:639 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp:11
  2021-07-30 12:14:47  [ main:650 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:650 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:11
  2021-07-30 12:14:47  [ main:651 ] - [ ERROR ]  parsing error 
signals:
    void replyReceived(const QVariantMap &reply);
  2021-07-30 12:14:47  [ main:651 ] - [ ERROR ]  warning: parse error signals:
    void replyReceived(const QVariantMap &reply);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:29
  2021-07-30 12:14:47  [ main:651 ] - [ ERROR ]  parsing error 
private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);
  2021-07-30 12:14:47  [ main:651 ] - [ ERROR ]  warning: parse error private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:35
  2021-07-30 12:14:47  [ main:657 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:657 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:10
  2021-07-30 12:14:47  [ main:657 ] - [ ERROR ]  parsing error 
private slots:
    void finished();
  2021-07-30 12:14:47  [ main:658 ] - [ ERROR ]  warning: parse error private slots:
    void finished();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:25
  2021-07-30 12:14:47  [ main:673 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:673 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp:10
  2021-07-30 12:14:47  [ main:686 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:686 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp:14
  2021-07-30 12:14:47  [ main:706 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, cookiesForUrl(QUrl(url))) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:112
  2021-07-30 12:14:47  [ main:706 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, allCookies()) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:129
  2021-07-30 12:14:47  [ main:715 ] - [ ERROR ]  warning: parse error foreach (QByteArray headerName, reply->rawHeaderList()) {
        QVariantMap header;
        header["name"] = QString::fromUtf8(headerName);
        header["value"] = QString::fromUtf8(reply->rawHeader(headerName));

        headers.append(header);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp:69
  2021-07-30 12:14:47  [ main:720 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:47  [ main:720 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:19
  2021-07-30 12:14:47  [ main:721 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:14:47  [ main:721 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:57
  2021-07-30 12:14:47  [ main:742 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:14:47  [ main:743 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:26
  2021-07-30 12:14:47  [ main:743 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:14:47  [ main:743 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:29
  2021-07-30 12:14:47  [ main:744 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };
  2021-07-30 12:14:47  [ main:744 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:41
  2021-07-30 12:14:48  [ main:1326 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:14:48  [ main:1326 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:26
  2021-07-30 12:14:48  [ main:1326 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:14:48  [ main:1326 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:30
  2021-07-30 12:14:48  [ main:1326 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };
  2021-07-30 12:14:48  [ main:1326 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:112
  2021-07-30 12:14:48  [ main:1333 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:48  [ main:1333 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:11
  2021-07-30 12:14:48  [ main:1334 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:14:48  [ main:1334 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:38
  2021-07-30 12:14:48  [ main:1358 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:14:48  [ main:1358 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\image.hpp:9
  2021-07-30 12:14:48  [ main:1386 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QByteArray& i, list ) {
    if ( !res.isEmpty() )
      res += sep;
    res += i;
  }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:55
  2021-07-30 12:14:48  [ main:1387 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QVariant& var, list )
    {
      indentLevel++;
      QByteArray serializedValue = serialize( var, ok, indentLevel);
      indentLevel--;
      if ( !*ok ) {
        break;
      }
      values << serializedValue;
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:72
  2021-07-30 12:14:48  [ main:1447 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.hpp
  2021-07-30 12:14:48  [ main:1449 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.cpp
  2021-07-30 12:14:48  [ main:1449 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.hpp
  2021-07-30 12:14:48  [ main:1450 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp
  2021-07-30 12:14:48  [ main:1451 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp
  2021-07-30 12:14:48  [ main:1451 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.cpp
  2021-07-30 12:14:48  [ main:1452 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp
  2021-07-30 12:14:48  [ main:1453 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.cpp
  2021-07-30 12:14:48  [ main:1453 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp
  2021-07-30 12:14:48  [ main:1454 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.cpp
  2021-07-30 12:14:48  [ main:1455 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.hpp
  2021-07-30 12:14:48  [ main:1456 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp
  2021-07-30 12:14:48  [ main:1456 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp
  2021-07-30 12:14:48  [ main:1457 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.cpp
  2021-07-30 12:14:48  [ main:1458 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp
  2021-07-30 12:14:48  [ main:1458 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.cpp
  2021-07-30 12:14:48  [ main:1459 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp
  2021-07-30 12:14:48  [ main:1460 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.cpp
  2021-07-30 12:14:48  [ main:1460 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.hpp
  2021-07-30 12:14:48  [ main:1461 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.cpp
  2021-07-30 12:14:48  [ main:1462 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp
  2021-07-30 12:14:48  [ main:1462 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.cpp
  2021-07-30 12:14:48  [ main:1463 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp
  2021-07-30 12:14:48  [ main:1464 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.cpp
  2021-07-30 12:14:48  [ main:1464 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp
  2021-07-30 12:14:48  [ main:1466 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\FlexLexer.h
  2021-07-30 12:14:48  [ main:1467 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.cc
  2021-07-30 12:14:48  [ main:1542 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.hh
  2021-07-30 12:14:48  [ main:1543 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cc
  2021-07-30 12:14:48  [ main:1544 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cpp
  2021-07-30 12:14:48  [ main:1544 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.h
  2021-07-30 12:14:48  [ main:1545 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\location.hh
  2021-07-30 12:14:48  [ main:1546 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.cpp
  2021-07-30 12:14:48  [ main:1547 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h
  2021-07-30 12:14:48  [ main:1548 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.cpp
  2021-07-30 12:14:48  [ main:1555 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:14:48  [ main:1555 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:29
  2021-07-30 12:14:48  [ main:1555 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:14:48  [ main:1555 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:31
  2021-07-30 12:14:48  [ main:1555 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:14:48  [ main:1555 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:37
  2021-07-30 12:14:48  [ main:1560 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h
  2021-07-30 12:14:48  [ main:1561 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser_p.h
  2021-07-30 12:14:48  [ main:1561 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\position.hh
  2021-07-30 12:14:48  [ main:1570 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_debug.h
  2021-07-30 12:14:48  [ main:1571 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_export.h
  2021-07-30 12:14:48  [ main:1571 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.cpp
  2021-07-30 12:14:48  [ main:1579 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:14:48  [ main:1579 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:30
  2021-07-30 12:14:48  [ main:1579 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:14:48  [ main:1579 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:32
  2021-07-30 12:14:48  [ main:1579 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };
  2021-07-30 12:14:48  [ main:1579 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:118
  2021-07-30 12:14:48  [ main:1585 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h
  2021-07-30 12:14:48  [ main:1585 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp
  2021-07-30 12:14:48  [ main:1586 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h
  2021-07-30 12:14:48  [ main:1587 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.cpp
  2021-07-30 12:14:48  [ main:1593 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:14:48  [ main:1594 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:29
  2021-07-30 12:14:48  [ main:1594 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:14:48  [ main:1594 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:33
  2021-07-30 12:14:48  [ main:1594 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:14:48  [ main:1594 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:39
  2021-07-30 12:14:48  [ main:1598 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h
  2021-07-30 12:14:48  [ main:1599 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\stack.hh
  2021-07-30 12:14:48  [ main:1601 ] - [ INFO ]  start dependency
  2021-07-30 12:14:48  [ main:1773 ] - [ INFO ]  includenum:127
  2021-07-30 12:14:48  [ main:1773 ] - [ INFO ]  definenum:81
  2021-07-30 12:14:48  [ main:1773 ] - [ INFO ]  callnum:45
  2021-07-30 12:14:48  [ main:1773 ] - [ INFO ]  returnnum:159
  2021-07-30 12:14:48  [ main:1773 ] - [ INFO ]  parameternum:614
  2021-07-30 12:14:48  [ main:1773 ] - [ INFO ]  extendnum:1
  2021-07-30 12:14:48  [ main:1773 ] - [ INFO ]  overridenum:1
  2021-07-30 12:14:48  [ main:1932 ] - [ INFO ]  Process finish!
  2021-07-30 12:16:06  [ main:0 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.cpp
  2021-07-30 12:16:06  [ main:466 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:06  [ main:515 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:9
  2021-07-30 12:16:06  [ main:517 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:16:06  [ main:517 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:23
  2021-07-30 12:16:06  [ main:595 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:06  [ main:595 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:9
  2021-07-30 12:16:06  [ main:596 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:16:06  [ main:596 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:22
  2021-07-30 12:16:06  [ main:600 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:06  [ main:600 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:11
  2021-07-30 12:16:06  [ main:601 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:06  [ main:602 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:69
  2021-07-30 12:16:06  [ main:636 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:06  [ main:636 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp:11
  2021-07-30 12:16:07  [ main:652 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:07  [ main:652 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:11
  2021-07-30 12:16:07  [ main:653 ] - [ ERROR ]  parsing error 
signals:
    void replyReceived(const QVariantMap &reply);
  2021-07-30 12:16:07  [ main:653 ] - [ ERROR ]  warning: parse error signals:
    void replyReceived(const QVariantMap &reply);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:29
  2021-07-30 12:16:07  [ main:653 ] - [ ERROR ]  parsing error 
private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);
  2021-07-30 12:16:07  [ main:653 ] - [ ERROR ]  warning: parse error private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:35
  2021-07-30 12:16:07  [ main:659 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:07  [ main:659 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:10
  2021-07-30 12:16:07  [ main:660 ] - [ ERROR ]  parsing error 
private slots:
    void finished();
  2021-07-30 12:16:07  [ main:660 ] - [ ERROR ]  warning: parse error private slots:
    void finished();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:25
  2021-07-30 12:16:07  [ main:676 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:07  [ main:676 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp:10
  2021-07-30 12:16:07  [ main:693 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:07  [ main:693 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp:14
  2021-07-30 12:16:07  [ main:714 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, cookiesForUrl(QUrl(url))) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:112
  2021-07-30 12:16:07  [ main:714 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, allCookies()) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:129
  2021-07-30 12:16:07  [ main:727 ] - [ ERROR ]  warning: parse error foreach (QByteArray headerName, reply->rawHeaderList()) {
        QVariantMap header;
        header["name"] = QString::fromUtf8(headerName);
        header["value"] = QString::fromUtf8(reply->rawHeader(headerName));

        headers.append(header);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp:69
  2021-07-30 12:16:07  [ main:732 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:07  [ main:732 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:19
  2021-07-30 12:16:07  [ main:733 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:07  [ main:733 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:57
  2021-07-30 12:16:07  [ main:755 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:07  [ main:755 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:26
  2021-07-30 12:16:07  [ main:755 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:07  [ main:755 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:29
  2021-07-30 12:16:07  [ main:756 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };
  2021-07-30 12:16:07  [ main:756 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:41
  2021-07-30 12:16:07  [ main:1242 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:07  [ main:1242 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:26
  2021-07-30 12:16:07  [ main:1242 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:07  [ main:1242 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:30
  2021-07-30 12:16:07  [ main:1242 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };
  2021-07-30 12:16:07  [ main:1242 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:112
  2021-07-30 12:16:07  [ main:1249 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:07  [ main:1249 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:11
  2021-07-30 12:16:07  [ main:1249 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:07  [ main:1249 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:38
  2021-07-30 12:16:07  [ main:1272 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:07  [ main:1273 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\image.hpp:9
  2021-07-30 12:16:07  [ main:1293 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QByteArray& i, list ) {
    if ( !res.isEmpty() )
      res += sep;
    res += i;
  }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:55
  2021-07-30 12:16:07  [ main:1294 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QVariant& var, list )
    {
      indentLevel++;
      QByteArray serializedValue = serialize( var, ok, indentLevel);
      indentLevel--;
      if ( !*ok ) {
        break;
      }
      values << serializedValue;
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:72
  2021-07-30 12:16:07  [ main:1342 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.hpp
  2021-07-30 12:16:07  [ main:1343 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.cpp
  2021-07-30 12:16:07  [ main:1344 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.hpp
  2021-07-30 12:16:07  [ main:1345 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp
  2021-07-30 12:16:07  [ main:1346 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp
  2021-07-30 12:16:07  [ main:1347 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.cpp
  2021-07-30 12:16:07  [ main:1347 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp
  2021-07-30 12:16:07  [ main:1348 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.cpp
  2021-07-30 12:16:07  [ main:1349 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp
  2021-07-30 12:16:07  [ main:1350 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.cpp
  2021-07-30 12:16:07  [ main:1351 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.hpp
  2021-07-30 12:16:07  [ main:1351 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp
  2021-07-30 12:16:07  [ main:1352 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp
  2021-07-30 12:16:07  [ main:1353 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.cpp
  2021-07-30 12:16:07  [ main:1354 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp
  2021-07-30 12:16:07  [ main:1354 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.cpp
  2021-07-30 12:16:07  [ main:1355 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp
  2021-07-30 12:16:07  [ main:1356 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.cpp
  2021-07-30 12:16:07  [ main:1356 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.hpp
  2021-07-30 12:16:07  [ main:1357 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.cpp
  2021-07-30 12:16:07  [ main:1358 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp
  2021-07-30 12:16:07  [ main:1358 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.cpp
  2021-07-30 12:16:07  [ main:1359 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp
  2021-07-30 12:16:07  [ main:1360 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.cpp
  2021-07-30 12:16:07  [ main:1360 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp
  2021-07-30 12:16:07  [ main:1361 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\FlexLexer.h
  2021-07-30 12:16:07  [ main:1362 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.cc
  2021-07-30 12:16:07  [ main:1407 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.hh
  2021-07-30 12:16:07  [ main:1408 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cc
  2021-07-30 12:16:07  [ main:1409 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cpp
  2021-07-30 12:16:07  [ main:1410 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.h
  2021-07-30 12:16:07  [ main:1412 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\location.hh
  2021-07-30 12:16:07  [ main:1412 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.cpp
  2021-07-30 12:16:07  [ main:1413 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h
  2021-07-30 12:16:07  [ main:1414 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.cpp
  2021-07-30 12:16:07  [ main:1421 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:07  [ main:1421 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:29
  2021-07-30 12:16:07  [ main:1421 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:07  [ main:1421 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:31
  2021-07-30 12:16:07  [ main:1421 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:16:07  [ main:1422 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:37
  2021-07-30 12:16:07  [ main:1426 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h
  2021-07-30 12:16:07  [ main:1426 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser_p.h
  2021-07-30 12:16:07  [ main:1427 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\position.hh
  2021-07-30 12:16:07  [ main:1436 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_debug.h
  2021-07-30 12:16:07  [ main:1437 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_export.h
  2021-07-30 12:16:07  [ main:1437 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.cpp
  2021-07-30 12:16:07  [ main:1444 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:07  [ main:1444 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:30
  2021-07-30 12:16:07  [ main:1444 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:07  [ main:1444 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:32
  2021-07-30 12:16:07  [ main:1445 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };
  2021-07-30 12:16:07  [ main:1445 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:118
  2021-07-30 12:16:07  [ main:1451 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h
  2021-07-30 12:16:07  [ main:1452 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp
  2021-07-30 12:16:07  [ main:1454 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h
  2021-07-30 12:16:07  [ main:1455 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.cpp
  2021-07-30 12:16:07  [ main:1465 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:07  [ main:1465 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:29
  2021-07-30 12:16:07  [ main:1465 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:07  [ main:1465 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:33
  2021-07-30 12:16:07  [ main:1465 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:16:07  [ main:1465 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:39
  2021-07-30 12:16:07  [ main:1471 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h
  2021-07-30 12:16:07  [ main:1472 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\stack.hh
  2021-07-30 12:16:07  [ main:1475 ] - [ INFO ]  start dependency
  2021-07-30 12:16:07  [ main:1644 ] - [ INFO ]  includenum:127
  2021-07-30 12:16:07  [ main:1644 ] - [ INFO ]  definenum:81
  2021-07-30 12:16:07  [ main:1644 ] - [ INFO ]  callnum:45
  2021-07-30 12:16:07  [ main:1644 ] - [ INFO ]  returnnum:159
  2021-07-30 12:16:07  [ main:1644 ] - [ INFO ]  parameternum:614
  2021-07-30 12:16:08  [ main:1645 ] - [ INFO ]  extendnum:1
  2021-07-30 12:16:08  [ main:1645 ] - [ INFO ]  overridenum:1
  2021-07-30 12:16:08  [ main:1795 ] - [ INFO ]  Process finish!
  2021-07-30 12:16:28  [ main:0 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.cpp
  2021-07-30 12:16:28  [ main:472 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:28  [ main:523 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:9
  2021-07-30 12:16:28  [ main:525 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:16:28  [ main:525 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:23
  2021-07-30 12:16:29  [ main:601 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:601 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:9
  2021-07-30 12:16:29  [ main:602 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:16:29  [ main:602 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:22
  2021-07-30 12:16:29  [ main:606 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:606 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:11
  2021-07-30 12:16:29  [ main:608 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:29  [ main:609 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:69
  2021-07-30 12:16:29  [ main:638 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:638 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp:11
  2021-07-30 12:16:29  [ main:649 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:649 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:11
  2021-07-30 12:16:29  [ main:650 ] - [ ERROR ]  parsing error 
signals:
    void replyReceived(const QVariantMap &reply);
  2021-07-30 12:16:29  [ main:650 ] - [ ERROR ]  warning: parse error signals:
    void replyReceived(const QVariantMap &reply);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:29
  2021-07-30 12:16:29  [ main:650 ] - [ ERROR ]  parsing error 
private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);
  2021-07-30 12:16:29  [ main:650 ] - [ ERROR ]  warning: parse error private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:35
  2021-07-30 12:16:29  [ main:657 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:657 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:10
  2021-07-30 12:16:29  [ main:658 ] - [ ERROR ]  parsing error 
private slots:
    void finished();
  2021-07-30 12:16:29  [ main:658 ] - [ ERROR ]  warning: parse error private slots:
    void finished();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:25
  2021-07-30 12:16:29  [ main:673 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:673 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp:10
  2021-07-30 12:16:29  [ main:685 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:686 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp:14
  2021-07-30 12:16:29  [ main:704 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, cookiesForUrl(QUrl(url))) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:112
  2021-07-30 12:16:29  [ main:704 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, allCookies()) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:129
  2021-07-30 12:16:29  [ main:713 ] - [ ERROR ]  warning: parse error foreach (QByteArray headerName, reply->rawHeaderList()) {
        QVariantMap header;
        header["name"] = QString::fromUtf8(headerName);
        header["value"] = QString::fromUtf8(reply->rawHeader(headerName));

        headers.append(header);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp:69
  2021-07-30 12:16:29  [ main:719 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:719 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:19
  2021-07-30 12:16:29  [ main:720 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:29  [ main:720 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:57
  2021-07-30 12:16:29  [ main:741 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:29  [ main:742 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:26
  2021-07-30 12:16:29  [ main:742 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:29  [ main:742 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:29
  2021-07-30 12:16:29  [ main:743 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };
  2021-07-30 12:16:29  [ main:743 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:41
  2021-07-30 12:16:29  [ main:1195 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:29  [ main:1195 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:26
  2021-07-30 12:16:29  [ main:1195 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:29  [ main:1195 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:30
  2021-07-30 12:16:29  [ main:1195 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };
  2021-07-30 12:16:29  [ main:1195 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:112
  2021-07-30 12:16:29  [ main:1202 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:1202 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:11
  2021-07-30 12:16:29  [ main:1202 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:29  [ main:1202 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:38
  2021-07-30 12:16:29  [ main:1226 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:29  [ main:1226 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\image.hpp:9
  2021-07-30 12:16:29  [ main:1251 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QByteArray& i, list ) {
    if ( !res.isEmpty() )
      res += sep;
    res += i;
  }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:55
  2021-07-30 12:16:29  [ main:1251 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QVariant& var, list )
    {
      indentLevel++;
      QByteArray serializedValue = serialize( var, ok, indentLevel);
      indentLevel--;
      if ( !*ok ) {
        break;
      }
      values << serializedValue;
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:72
  2021-07-30 12:16:29  [ main:1301 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.hpp
  2021-07-30 12:16:29  [ main:1302 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.cpp
  2021-07-30 12:16:29  [ main:1303 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.hpp
  2021-07-30 12:16:29  [ main:1304 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp
  2021-07-30 12:16:29  [ main:1305 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp
  2021-07-30 12:16:29  [ main:1305 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.cpp
  2021-07-30 12:16:29  [ main:1306 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp
  2021-07-30 12:16:29  [ main:1307 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.cpp
  2021-07-30 12:16:29  [ main:1308 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp
  2021-07-30 12:16:29  [ main:1310 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.cpp
  2021-07-30 12:16:29  [ main:1310 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.hpp
  2021-07-30 12:16:29  [ main:1311 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp
  2021-07-30 12:16:29  [ main:1312 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp
  2021-07-30 12:16:29  [ main:1312 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.cpp
  2021-07-30 12:16:29  [ main:1313 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp
  2021-07-30 12:16:29  [ main:1314 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.cpp
  2021-07-30 12:16:29  [ main:1314 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp
  2021-07-30 12:16:29  [ main:1315 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.cpp
  2021-07-30 12:16:29  [ main:1316 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.hpp
  2021-07-30 12:16:29  [ main:1316 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.cpp
  2021-07-30 12:16:29  [ main:1317 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp
  2021-07-30 12:16:29  [ main:1318 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.cpp
  2021-07-30 12:16:29  [ main:1319 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp
  2021-07-30 12:16:29  [ main:1319 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.cpp
  2021-07-30 12:16:29  [ main:1320 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp
  2021-07-30 12:16:29  [ main:1321 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\FlexLexer.h
  2021-07-30 12:16:29  [ main:1322 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.cc
  2021-07-30 12:16:29  [ main:1368 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.hh
  2021-07-30 12:16:29  [ main:1368 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cc
  2021-07-30 12:16:29  [ main:1369 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cpp
  2021-07-30 12:16:29  [ main:1370 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.h
  2021-07-30 12:16:29  [ main:1370 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\location.hh
  2021-07-30 12:16:29  [ main:1371 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.cpp
  2021-07-30 12:16:29  [ main:1372 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h
  2021-07-30 12:16:29  [ main:1372 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.cpp
  2021-07-30 12:16:29  [ main:1379 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:29  [ main:1379 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:29
  2021-07-30 12:16:29  [ main:1379 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:29  [ main:1379 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:31
  2021-07-30 12:16:29  [ main:1379 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:16:29  [ main:1379 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:37
  2021-07-30 12:16:29  [ main:1384 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h
  2021-07-30 12:16:29  [ main:1385 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser_p.h
  2021-07-30 12:16:29  [ main:1385 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\position.hh
  2021-07-30 12:16:29  [ main:1394 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_debug.h
  2021-07-30 12:16:29  [ main:1395 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_export.h
  2021-07-30 12:16:29  [ main:1396 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.cpp
  2021-07-30 12:16:29  [ main:1403 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:29  [ main:1403 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:30
  2021-07-30 12:16:29  [ main:1403 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:29  [ main:1403 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:32
  2021-07-30 12:16:29  [ main:1403 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };
  2021-07-30 12:16:29  [ main:1403 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:118
  2021-07-30 12:16:29  [ main:1409 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h
  2021-07-30 12:16:29  [ main:1410 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp
  2021-07-30 12:16:29  [ main:1411 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h
  2021-07-30 12:16:29  [ main:1412 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.cpp
  2021-07-30 12:16:29  [ main:1419 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:29  [ main:1419 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:29
  2021-07-30 12:16:29  [ main:1419 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:29  [ main:1419 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:33
  2021-07-30 12:16:29  [ main:1419 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:16:29  [ main:1420 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:39
  2021-07-30 12:16:29  [ main:1423 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h
  2021-07-30 12:16:29  [ main:1424 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\stack.hh
  2021-07-30 12:16:29  [ main:1426 ] - [ INFO ]  start dependency
  2021-07-30 12:16:30  [ main:1593 ] - [ INFO ]  includenum:127
  2021-07-30 12:16:30  [ main:1593 ] - [ INFO ]  definenum:81
  2021-07-30 12:16:30  [ main:1593 ] - [ INFO ]  callnum:45
  2021-07-30 12:16:30  [ main:1593 ] - [ INFO ]  returnnum:159
  2021-07-30 12:16:30  [ main:1593 ] - [ INFO ]  parameternum:614
  2021-07-30 12:16:30  [ main:1593 ] - [ INFO ]  extendnum:1
  2021-07-30 12:16:30  [ main:1593 ] - [ INFO ]  overridenum:1
  2021-07-30 12:16:30  [ main:1741 ] - [ INFO ]  Process finish!
  2021-07-30 12:16:47  [ main:0 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.cpp
  2021-07-30 12:16:47  [ main:471 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:520 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:9
  2021-07-30 12:16:47  [ main:522 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:16:47  [ main:522 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:23
  2021-07-30 12:16:47  [ main:595 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:595 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:9
  2021-07-30 12:16:47  [ main:596 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:16:47  [ main:596 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:22
  2021-07-30 12:16:47  [ main:600 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:601 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:11
  2021-07-30 12:16:47  [ main:602 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:47  [ main:602 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:69
  2021-07-30 12:16:47  [ main:627 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:627 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp:11
  2021-07-30 12:16:47  [ main:642 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:642 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:11
  2021-07-30 12:16:47  [ main:643 ] - [ ERROR ]  parsing error 
signals:
    void replyReceived(const QVariantMap &reply);
  2021-07-30 12:16:47  [ main:643 ] - [ ERROR ]  warning: parse error signals:
    void replyReceived(const QVariantMap &reply);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:29
  2021-07-30 12:16:47  [ main:643 ] - [ ERROR ]  parsing error 
private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);
  2021-07-30 12:16:47  [ main:644 ] - [ ERROR ]  warning: parse error private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:35
  2021-07-30 12:16:47  [ main:652 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:653 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:10
  2021-07-30 12:16:47  [ main:653 ] - [ ERROR ]  parsing error 
private slots:
    void finished();
  2021-07-30 12:16:47  [ main:653 ] - [ ERROR ]  warning: parse error private slots:
    void finished();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:25
  2021-07-30 12:16:47  [ main:668 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:669 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp:10
  2021-07-30 12:16:47  [ main:680 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:680 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp:14
  2021-07-30 12:16:47  [ main:696 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, cookiesForUrl(QUrl(url))) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:112
  2021-07-30 12:16:47  [ main:697 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, allCookies()) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:129
  2021-07-30 12:16:47  [ main:706 ] - [ ERROR ]  warning: parse error foreach (QByteArray headerName, reply->rawHeaderList()) {
        QVariantMap header;
        header["name"] = QString::fromUtf8(headerName);
        header["value"] = QString::fromUtf8(reply->rawHeader(headerName));

        headers.append(header);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp:69
  2021-07-30 12:16:47  [ main:710 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:47  [ main:710 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:19
  2021-07-30 12:16:47  [ main:711 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:47  [ main:711 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:57
  2021-07-30 12:16:47  [ main:732 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:47  [ main:733 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:26
  2021-07-30 12:16:47  [ main:733 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:47  [ main:733 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:29
  2021-07-30 12:16:47  [ main:734 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };
  2021-07-30 12:16:47  [ main:734 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:41
  2021-07-30 12:16:48  [ main:1244 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:48  [ main:1244 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:26
  2021-07-30 12:16:48  [ main:1244 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:48  [ main:1245 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:30
  2021-07-30 12:16:48  [ main:1245 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };
  2021-07-30 12:16:48  [ main:1245 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:112
  2021-07-30 12:16:48  [ main:1253 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:48  [ main:1253 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:11
  2021-07-30 12:16:48  [ main:1253 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:16:48  [ main:1254 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:38
  2021-07-30 12:16:48  [ main:1275 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:16:48  [ main:1276 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\image.hpp:9
  2021-07-30 12:16:48  [ main:1299 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QByteArray& i, list ) {
    if ( !res.isEmpty() )
      res += sep;
    res += i;
  }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:55
  2021-07-30 12:16:48  [ main:1300 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QVariant& var, list )
    {
      indentLevel++;
      QByteArray serializedValue = serialize( var, ok, indentLevel);
      indentLevel--;
      if ( !*ok ) {
        break;
      }
      values << serializedValue;
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:72
  2021-07-30 12:16:48  [ main:1342 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.hpp
  2021-07-30 12:16:48  [ main:1343 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.cpp
  2021-07-30 12:16:48  [ main:1344 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.hpp
  2021-07-30 12:16:48  [ main:1345 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp
  2021-07-30 12:16:48  [ main:1345 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp
  2021-07-30 12:16:48  [ main:1347 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.cpp
  2021-07-30 12:16:48  [ main:1348 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp
  2021-07-30 12:16:48  [ main:1349 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.cpp
  2021-07-30 12:16:48  [ main:1351 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp
  2021-07-30 12:16:48  [ main:1352 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.cpp
  2021-07-30 12:16:48  [ main:1353 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.hpp
  2021-07-30 12:16:48  [ main:1353 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp
  2021-07-30 12:16:48  [ main:1354 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp
  2021-07-30 12:16:48  [ main:1355 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.cpp
  2021-07-30 12:16:48  [ main:1356 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp
  2021-07-30 12:16:48  [ main:1356 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.cpp
  2021-07-30 12:16:48  [ main:1357 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp
  2021-07-30 12:16:48  [ main:1358 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.cpp
  2021-07-30 12:16:48  [ main:1359 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.hpp
  2021-07-30 12:16:48  [ main:1359 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.cpp
  2021-07-30 12:16:48  [ main:1360 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp
  2021-07-30 12:16:48  [ main:1361 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.cpp
  2021-07-30 12:16:48  [ main:1361 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp
  2021-07-30 12:16:48  [ main:1362 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.cpp
  2021-07-30 12:16:48  [ main:1363 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp
  2021-07-30 12:16:48  [ main:1364 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\FlexLexer.h
  2021-07-30 12:16:48  [ main:1365 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.cc
  2021-07-30 12:16:48  [ main:1433 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.hh
  2021-07-30 12:16:48  [ main:1434 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cc
  2021-07-30 12:16:48  [ main:1434 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cpp
  2021-07-30 12:16:48  [ main:1435 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.h
  2021-07-30 12:16:48  [ main:1436 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\location.hh
  2021-07-30 12:16:48  [ main:1437 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.cpp
  2021-07-30 12:16:48  [ main:1438 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h
  2021-07-30 12:16:48  [ main:1439 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.cpp
  2021-07-30 12:16:48  [ main:1447 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:48  [ main:1447 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:29
  2021-07-30 12:16:48  [ main:1447 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:48  [ main:1447 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:31
  2021-07-30 12:16:48  [ main:1447 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:16:48  [ main:1448 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:37
  2021-07-30 12:16:48  [ main:1452 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h
  2021-07-30 12:16:48  [ main:1453 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser_p.h
  2021-07-30 12:16:48  [ main:1454 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\position.hh
  2021-07-30 12:16:48  [ main:1462 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_debug.h
  2021-07-30 12:16:48  [ main:1463 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_export.h
  2021-07-30 12:16:48  [ main:1464 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.cpp
  2021-07-30 12:16:48  [ main:1470 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:48  [ main:1471 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:30
  2021-07-30 12:16:48  [ main:1471 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:48  [ main:1471 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:32
  2021-07-30 12:16:48  [ main:1471 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };
  2021-07-30 12:16:48  [ main:1471 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:118
  2021-07-30 12:16:48  [ main:1476 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h
  2021-07-30 12:16:48  [ main:1477 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp
  2021-07-30 12:16:48  [ main:1477 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h
  2021-07-30 12:16:48  [ main:1478 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.cpp
  2021-07-30 12:16:48  [ main:1485 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:16:48  [ main:1485 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:29
  2021-07-30 12:16:48  [ main:1485 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:16:48  [ main:1486 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:33
  2021-07-30 12:16:48  [ main:1486 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:16:48  [ main:1486 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:39
  2021-07-30 12:16:48  [ main:1490 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h
  2021-07-30 12:16:48  [ main:1491 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\stack.hh
  2021-07-30 12:16:48  [ main:1493 ] - [ INFO ]  start dependency
  2021-07-30 12:16:48  [ main:1681 ] - [ INFO ]  includenum:127
  2021-07-30 12:16:48  [ main:1681 ] - [ INFO ]  definenum:81
  2021-07-30 12:16:48  [ main:1681 ] - [ INFO ]  callnum:45
  2021-07-30 12:16:48  [ main:1681 ] - [ INFO ]  returnnum:159
  2021-07-30 12:16:48  [ main:1682 ] - [ INFO ]  parameternum:614
  2021-07-30 12:16:48  [ main:1682 ] - [ INFO ]  extendnum:1
  2021-07-30 12:16:48  [ main:1682 ] - [ INFO ]  overridenum:1
  2021-07-30 12:16:48  [ main:1817 ] - [ INFO ]  Process finish!
  2021-07-30 12:18:00  [ main:0 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.cpp
  2021-07-30 12:18:01  [ main:484 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:535 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:9
  2021-07-30 12:18:01  [ main:537 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:18:01  [ main:537 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp:23
  2021-07-30 12:18:01  [ main:606 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:606 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:9
  2021-07-30 12:18:01  [ main:606 ] - [ ERROR ]  parsing error 
private slots:
    void handleTimeout();
  2021-07-30 12:18:01  [ main:606 ] - [ ERROR ]  warning: parse error private slots:
    void handleTimeout();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp:22
  2021-07-30 12:18:01  [ main:611 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:611 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:11
  2021-07-30 12:18:01  [ main:613 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:18:01  [ main:613 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp:69
  2021-07-30 12:18:01  [ main:636 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:636 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp:11
  2021-07-30 12:18:01  [ main:648 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:648 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:11
  2021-07-30 12:18:01  [ main:648 ] - [ ERROR ]  parsing error 
signals:
    void replyReceived(const QVariantMap &reply);
  2021-07-30 12:18:01  [ main:649 ] - [ ERROR ]  warning: parse error signals:
    void replyReceived(const QVariantMap &reply);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:29
  2021-07-30 12:18:01  [ main:649 ] - [ ERROR ]  parsing error 
private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);
  2021-07-30 12:18:01  [ main:649 ] - [ ERROR ]  warning: parse error private slots:
    void provideAuthentication(QNetworkReply *reply, QAuthenticator *authenticator);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp:35
  2021-07-30 12:18:01  [ main:655 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:655 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:10
  2021-07-30 12:18:01  [ main:656 ] - [ ERROR ]  parsing error 
private slots:
    void finished();
  2021-07-30 12:18:01  [ main:656 ] - [ ERROR ]  warning: parse error private slots:
    void finished();Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp:25
  2021-07-30 12:18:01  [ main:671 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:671 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp:10
  2021-07-30 12:18:01  [ main:682 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:682 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp:14
  2021-07-30 12:18:01  [ main:698 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, cookiesForUrl(QUrl(url))) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:112
  2021-07-30 12:18:01  [ main:699 ] - [ ERROR ]  warning: parse error foreach(QNetworkCookie n_cookie, allCookies()) {
        cookie["name"] = QString::fromUtf8(n_cookie.name());
        cookie["value"] = QString::fromUtf8(n_cookie.value());
        cookie["domain"] = n_cookie.domain();
        cookie["path"] = n_cookie.path();
        cookie["expires"] = n_cookie.expirationDate().toString(Qt::ISODate);

        cookiesList.append(cookie);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp:129
  2021-07-30 12:18:01  [ main:707 ] - [ ERROR ]  warning: parse error foreach (QByteArray headerName, reply->rawHeaderList()) {
        QVariantMap header;
        header["name"] = QString::fromUtf8(headerName);
        header["value"] = QString::fromUtf8(reply->rawHeader(headerName));

        headers.append(header);
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp:69
  2021-07-30 12:18:01  [ main:712 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:01  [ main:712 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:19
  2021-07-30 12:18:01  [ main:713 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:18:01  [ main:713 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\page.hpp:57
  2021-07-30 12:18:01  [ main:735 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:18:01  [ main:735 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:26
  2021-07-30 12:18:01  [ main:735 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:18:01  [ main:736 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:29
  2021-07-30 12:18:01  [ main:737 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };
  2021-07-30 12:18:01  [ main:737 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Parser
  {
    public:
      Parser();
      ~Parser();

      /**
      * Read JSON string from the I/O Device and converts it to a QVariant object
      * @param io Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      */
      QVariant parse(QIODevice* io, bool* ok = 0);

      /**
      * This is a method provided for convenience.
      * @param jsonData data containing the JSON object representation
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true.
      * @returns a QVariant object generated from the JSON string
      * @sa errorString
      * @sa errorLine
      */
      QVariant parse(const QByteArray& jsonData, bool* ok = 0);

      /**
      * This method returns the error message
      * @returns a QString object containing the error message of the last parse operation
      * @sa errorLine
      */
      QString errorString() const;

      /**
      * This method returns line number where the error occurred
      * @returns the line number where the error occurred
      * @sa errorString
      */
      int errorLine() const;

      /**
       * Sets whether special numbers (Infinity, -Infinity, NaN) are allowed as an extension to
       * the standard
       * @param  allowSpecialNumbers new value of whether special numbers are allowed
       * @sa specialNumbersAllowed
       */
      void allowSpecialNumbers(bool allowSpecialNumbers);

      /**
       * @returns whether special numbers (Infinity, -Infinity, NaN) are allowed
       * @sa allowSpecialNumbers
       */
      bool specialNumbersAllowed() const;

    private:
      Q_DISABLE_COPY(Parser)
      ParserPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h:41
  2021-07-30 12:18:01  [ main:1239 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:18:01  [ main:1240 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:26
  2021-07-30 12:18:01  [ main:1240 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:18:01  [ main:1240 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:30
  2021-07-30 12:18:01  [ main:1240 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };
  2021-07-30 12:18:01  [ main:1240 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT Serializer {
  public:
    Serializer();
    ~Serializer();

     /**
      * This method generates a textual JSON representation and outputs it to the
      * passed in I/O Device.
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param out Input output device
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    void serialize( const QVariant& variant, QIODevice* out, bool* ok);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      *
      * \deprecated This method is going to be removed with the next major release of QJson.
      */
    QByteArray serialize( const QVariant& variant);

    /**
      * This is a method provided for convenience. It turns the passed in in-memory
      * representation of the JSON document into a textual one, which is returned.
      * If the returned string is empty, the document was empty. If it was null, there
      * was a parsing error.
      *
      * @param variant The JSON document in its in-memory representation as generated by the
      * parser.
      * @param ok if a conversion error occurs, *ok is set to false; otherwise *ok is set to true
      */
    QByteArray serialize( const QVariant& variant, bool *ok);

    /**
     * Allow or disallow writing of NaN and/or Infinity (as an extension to QJson)
     */
    void allowSpecialNumbers(bool allow);

    /**
     * Is Nan and/or Infinity allowed?
     */
    bool specialNumbersAllowed() const;

    /**
     * set output indentation mode as defined in QJson::IndentMode
     */
    void setIndentMode(IndentMode mode = QJson::IndentNone);


    /**
    * set double precision used while converting Double
    * \sa QByteArray::number
    */
    void setDoublePrecision(int precision);

    /**
     * Returns one of the indentation modes defined in QJson::IndentMode
     */
    IndentMode indentMode() const;

    /**
     * Returns the error message
     */
    QString errorMessage() const;

  private:
    Q_DISABLE_COPY(Serializer)
    class SerializerPrivate;
    SerializerPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h:112
  2021-07-30 12:18:02  [ main:1248 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:02  [ main:1248 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:11
  2021-07-30 12:18:02  [ main:1249 ] - [ ERROR ]  parsing error 
private slots:
    void loadFinished(bool ok);
  2021-07-30 12:18:02  [ main:1249 ] - [ ERROR ]  warning: parse error private slots:
    void loadFinished(bool ok);Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp:38
  2021-07-30 12:18:02  [ main:1270 ] - [ ERROR ]  parsing error 
Q_OBJECT
  2021-07-30 12:18:02  [ main:1270 ] - [ ERROR ]  warning: parse error Q_OBJECTSyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\private\image.hpp:9
  2021-07-30 12:18:02  [ main:1294 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QByteArray& i, list ) {
    if ( !res.isEmpty() )
      res += sep;
    res += i;
  }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:55
  2021-07-30 12:18:02  [ main:1295 ] - [ ERROR ]  warning: parse error Q_FOREACH( const QVariant& var, list )
    {
      indentLevel++;
      QByteArray serializedValue = serialize( var, ok, indentLevel);
      indentLevel--;
      if ( !*ok ) {
        break;
      }
      values << serializedValue;
    }Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp:72
  2021-07-30 12:18:02  [ main:1337 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\phantompy.hpp
  2021-07-30 12:18:02  [ main:1338 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.cpp
  2021-07-30 12:18:02  [ main:1339 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\context.hpp
  2021-07-30 12:18:02  [ main:1340 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.cpp
  2021-07-30 12:18:02  [ main:1341 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\cookiejar.hpp
  2021-07-30 12:18:02  [ main:1342 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.cpp
  2021-07-30 12:18:02  [ main:1344 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\eventprocessor.hpp
  2021-07-30 12:18:02  [ main:1344 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.cpp
  2021-07-30 12:18:02  [ main:1345 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\frame.hpp
  2021-07-30 12:18:02  [ main:1346 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.cpp
  2021-07-30 12:18:02  [ main:1347 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\image.hpp
  2021-07-30 12:18:02  [ main:1347 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.cpp
  2021-07-30 12:18:02  [ main:1348 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanager.hpp
  2021-07-30 12:18:02  [ main:1349 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.cpp
  2021-07-30 12:18:02  [ main:1349 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networkmanagerproxy.hpp
  2021-07-30 12:18:02  [ main:1350 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.cpp
  2021-07-30 12:18:02  [ main:1351 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\networktimeout.hpp
  2021-07-30 12:18:02  [ main:1352 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.cpp
  2021-07-30 12:18:02  [ main:1352 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\page.hpp
  2021-07-30 12:18:02  [ main:1353 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.cpp
  2021-07-30 12:18:02  [ main:1354 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\timeout.hpp
  2021-07-30 12:18:02  [ main:1355 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.cpp
  2021-07-30 12:18:02  [ main:1355 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelement.hpp
  2021-07-30 12:18:02  [ main:1356 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.cpp
  2021-07-30 12:18:02  [ main:1357 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\private\webelementcollection.hpp
  2021-07-30 12:18:02  [ main:1358 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\FlexLexer.h
  2021-07-30 12:18:02  [ main:1359 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.cc
  2021-07-30 12:18:02  [ main:1425 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_parser.hh
  2021-07-30 12:18:02  [ main:1426 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cc
  2021-07-30 12:18:02  [ main:1427 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.cpp
  2021-07-30 12:18:02  [ main:1427 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\json_scanner.h
  2021-07-30 12:18:02  [ main:1428 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\location.hh
  2021-07-30 12:18:02  [ main:1429 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.cpp
  2021-07-30 12:18:02  [ main:1430 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser.h
  2021-07-30 12:18:02  [ main:1431 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.cpp
  2021-07-30 12:18:02  [ main:1437 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:18:02  [ main:1437 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:29
  2021-07-30 12:18:02  [ main:1438 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:18:02  [ main:1438 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:31
  2021-07-30 12:18:02  [ main:1438 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:18:02  [ main:1438 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT ParserRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit ParserRunnable(QObject* parent = 0);
      ~ParserRunnable();

      void setData( const QByteArray& data );

      void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the parsing process has been completed
      * @param json contains the result of the parsing
      * @param ok if a parsing error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QVariant& json, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(ParserRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h:37
  2021-07-30 12:18:02  [ main:1442 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parserrunnable.h
  2021-07-30 12:18:02  [ main:1443 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\parser_p.h
  2021-07-30 12:18:02  [ main:1444 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\position.hh
  2021-07-30 12:18:02  [ main:1453 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_debug.h
  2021-07-30 12:18:02  [ main:1454 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qjson_export.h
  2021-07-30 12:18:02  [ main:1455 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.cpp
  2021-07-30 12:18:02  [ main:1464 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:18:02  [ main:1464 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:30
  2021-07-30 12:18:02  [ main:1464 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:18:02  [ main:1464 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:32
  2021-07-30 12:18:02  [ main:1464 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };
  2021-07-30 12:18:02  [ main:1465 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT QObjectHelper {
    public:
      QObjectHelper();
      ~QObjectHelper();

    /**
    * This method converts a QObject instance into a QVariantMap.
    *
    * @param object The QObject instance to be converted.
    * @param ignoredProperties Properties that won't be converted.
    */
    static QVariantMap qobject2qvariant( const QObject* object,
                                  const QStringList& ignoredProperties = QStringList(QString(QLatin1String("objectName"))));

    /**
    * This method converts a QVariantMap instance into a QObject
    *
    * @param variant Attributes to assign to the object.
    * @param object The QObject instance to update.
    */
    static void qvariant2qobject(const QVariantMap& variant, QObject* object);

    private:
      Q_DISABLE_COPY(QObjectHelper)
      class QObjectHelperPrivate;
      QObjectHelperPrivate* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h:118
  2021-07-30 12:18:02  [ main:1469 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\qobjecthelper.h
  2021-07-30 12:18:02  [ main:1470 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.cpp
  2021-07-30 12:18:02  [ main:1471 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializer.h
  2021-07-30 12:18:02  [ main:1472 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.cpp
  2021-07-30 12:18:02  [ main:1480 ] - [ ERROR ]  parsing error 
QT_BEGIN_NAMESPACE
  2021-07-30 12:18:02  [ main:1480 ] - [ ERROR ]  warning: parse error QT_BEGIN_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:29
  2021-07-30 12:18:02  [ main:1480 ] - [ ERROR ]  parsing error 
QT_END_NAMESPACE
  2021-07-30 12:18:02  [ main:1480 ] - [ ERROR ]  warning: parse error QT_END_NAMESPACESyntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:33
  2021-07-30 12:18:02  [ main:1480 ] - [ ERROR ]  parsing error 
class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };
  2021-07-30 12:18:02  [ main:1480 ] - [ ERROR ]  warning: parse error class QJSON_EXPORT SerializerRunnable  : public QObject, public QRunnable
  {
    Q_OBJECT
    public:
      explicit SerializerRunnable(QObject* parent = 0);
      ~SerializerRunnable();

      /**
       * Sets the json object to serialize.
       *
       * @param json QVariant containing the json representation to be serialized
       */
      void setJsonObject( const QVariant& json );

      /* reimp */ void run();

    Q_SIGNALS:
      /**
      * This signal is emitted when the serialization process has been completed
      * @param serialized contains the result of the serialization
      * @param ok if a serialization error occurs ok is set to false, otherwise it's set to true.
      * @param error_msg contains a string explaining the failure reason
      **/
      void parsingFinished(const QByteArray& serialized, bool ok, const QString& error_msg);

    private:
      Q_DISABLE_COPY(SerializerRunnable)
      class Private;
      Private* const d;
  };Syntax error in file: C:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h:39
  2021-07-30 12:18:02  [ main:1484 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\serializerrunnable.h
  2021-07-30 12:18:02  [ main:1485 ] - [ INFO ]  parseC:\Users\ding7\Desktop\phantompy\lib\qjson\stack.hh
  2021-07-30 12:18:02  [ main:1487 ] - [ INFO ]  start dependency
  2021-07-30 12:18:02  [ main:1577 ] - [ INFO ]  includenum:127
  2021-07-30 12:18:02  [ main:1577 ] - [ INFO ]  definenum:81
  2021-07-30 12:18:02  [ main:1577 ] - [ INFO ]  callnum:45
  2021-07-30 12:18:02  [ main:1577 ] - [ INFO ]  returnnum:159
  2021-07-30 12:18:02  [ main:1577 ] - [ INFO ]  parameternum:614
  2021-07-30 12:18:02  [ main:1577 ] - [ INFO ]  extendnum:1
  2021-07-30 12:18:02  [ main:1577 ] - [ INFO ]  overridenum:1
  2021-07-30 12:18:02  [ main:1707 ] - [ INFO ]  Process finish!
  